/*
 * The ini file is run when run debug.
 * It will setup ICE connection, and PATCH related registers.
 * 
 * In both CPU, it needs to setup APS and MSQ PATCH registers
 * because when ICE connect to CPU, it will trigger system reset,
 * then PATCH registers are reset.
 * We need to setup PATCH regsiter both side in order to make sure
 * the registers are properly set.
 */

LOAD "..\\..\\targets\\opl2500\\Output\\Objects\\opl2500_rom_aps.axf" NOCODE

FUNC void ConnectICE (void) {
    _WWORD(0xE000EDF0, 0xA05F0003);
    _WWORD(0xE000EDFC, 0x01000001);
    _WWORD(0xE000ED0C, 0x05FA0001);
}

FUNC void Setup (void) {
    _WDWORD(0x00400000, 0xB7FEF017);  // ipatch 0 code
    /* @0x8000  [17 F0 FE B7]   B #0x420000 
     * 0x420000 is the address as defined in scatter file */
    
    /* ********** APS ****************** */
    // patch
    _WDWORD(0x400011D0, 0x00008000);    // [0] Entry address
    _WDWORD(0x40001250, 0x00400000);    // the start address of machine code
    _WDWORD(0x40001254, 0x00000001);    // enable 0, disable 1~31
    _WDWORD(0x3000E258, 0x00000000);    // disable 32~63

    // remap
    _WDWORD(0x40001394, 0x00000000);    // disable
    _WDWORD(0x40001398, 0x00000000);    // disable
    _WDWORD(0x4000139c, 0x00000000);    // disable
    _WDWORD(0x400013a0, 0x00000000);    // disable
    
    
    /* ********** MSQ ****************** */
    // patch
    _WDWORD(0x40001360, 0x00600000);    // the start address of machine code
    _WDWORD(0x40001260, 0x00004000);    // [0] original address
    _WDWORD(0x40001264, 0x00004004);    // [1] original address
    _WDWORD(0x40001364, 0x00000003);    // enable 0 and 1
    _WDWORD(0x40001368, 0x00000000);    // disable
    _WDWORD(0x3000E4AC, 0x00000000);    // disable
    _WDWORD(0x3000E4B0, 0x00000000);    // disable
    // remap
    _WDWORD(0x400013bc, 0x00000000);    // disable
    _WDWORD(0x400013c0, 0x00000000);    // disable
    _WDWORD(0x400013c4, 0x00000000);    // disable

}

FUNC void OnResetExec (void)  {         // executes upon software RESET
    ConnectICE();
    Setup();                            // Setup for Running
}

LOAD %L INCREMENTAL
reset
Setup();  // Get ready to execute image in SRAM or whatever region it is in
